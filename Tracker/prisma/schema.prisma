generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  clerkUserId     String        @unique
  email           String        @unique
  firstName       String?
  lastName        String?
  profileImageUrl String?
  role            String        @default("CLIENT") // CLIENT, ADMIN
  isActive        Boolean       @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  auditLogs       AuditLog[]
  businesses      Business[]
  transactions    Transaction[]
  
  // Multi-tenant relationships
  ownedTenants    Tenant[]      @relation("TenantOwner")
  tenantUsers     TenantUser[]  @relation("UserTenants")
  createdMigrations Migration[] @relation("MigrationCreator")
  createdScheduledOps ScheduledOperation[] @relation("ScheduledOperationCreator")

  @@map("users")
}

model Business {
  id              String           @id @default(cuid())
  name            String
  taxId           String?
  address         String
  city            String
  state           String
  zipCode         String
  country         String           @default("US")
  phone           String?
  email           String?
  website         String?
  industry        String?
  businessType    String           @default("LLC")
  nexusStates     String[]
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownerId         String
  tenantId        String?          // Multi-tenant support
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tenant          Tenant?          @relation("TenantBusinesses", fields: [tenantId], references: [id], onDelete: Cascade)
  posIntegrations PosIntegration[]
  reports         Report[]
  taxRates        TaxRate[]
  transactions    Transaction[]

  @@index([tenantId])
  @@map("businesses")
}

model Transaction {
  id                    String        @id @default(cuid())
  externalId            String?
  amount                Decimal       @db.Decimal(10, 2)
  taxAmount             Decimal       @db.Decimal(10, 2)
  totalAmount           Decimal       @db.Decimal(10, 2)
  currency              String        @default("USD")
  federalTax            Decimal?      @db.Decimal(10, 4)
  stateTax              Decimal?      @db.Decimal(10, 4)
  countyTax             Decimal?      @db.Decimal(10, 4)
  cityTax               Decimal?      @db.Decimal(10, 4)
  specialDistrictTax    Decimal?      @db.Decimal(10, 4)
  description           String?
  productCategory       String?
  customerType          String        @default("RETAIL")
  isExempt              Boolean       @default(false)
  exemptionReason       String?
  saleLocation          String
  customerLocation      String?
  status                String        @default("COMPLETED")
  paymentMethod         String?
  posSource             String?
  transactionDate       DateTime
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  businessId            String
  userId                String?
  tenantId              String?       // Multi-tenant support
  originalTransactionId String?
  business              Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant                Tenant?       @relation("TenantTransactions", fields: [tenantId], references: [id], onDelete: Cascade)
  originalTransaction   Transaction?  @relation("TransactionRefunds", fields: [originalTransactionId], references: [id])
  refunds               Transaction[] @relation("TransactionRefunds")
  user                  User?         @relation(fields: [userId], references: [id])

  @@index([businessId, transactionDate])
  @@index([tenantId])
  @@index([status])
  @@index([externalId])
  @@map("transactions")
}

model TaxRate {
  id                String    @id @default(cuid())
  jurisdiction      String
  jurisdictionCode  String
  taxType           String
  rate              Decimal   @db.Decimal(8, 6)
  productCategories String[]
  effectiveDate     DateTime
  expirationDate    DateTime?
  isActive          Boolean   @default(true)
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  businessId        String?
  tenantId          String?   // Multi-tenant support
  business          Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant            Tenant?   @relation("TenantTaxRates", fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([jurisdiction, jurisdictionCode])
  @@index([tenantId])
  @@index([effectiveDate, expirationDate])
  @@index([isActive])
  @@map("tax_rates")
}

model PosIntegration {
  id           String    @id @default(cuid())
  provider     String
  isActive     Boolean   @default(true)
  credentials  Json
  webhookUrl   String?
  lastSyncAt   DateTime?
  syncStatus   String    @default("PENDING")
  errorMessage String?
  settings     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  businessId   String
  tenantId     String?   // Multi-tenant support
  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant       Tenant?   @relation("TenantPosIntegrations", fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([businessId, provider])
  @@index([tenantId])
  @@map("pos_integrations")
}

model Report {
  id                String    @id @default(cuid())
  name              String
  type              String
  period            String
  startDate         DateTime
  endDate           DateTime
  status            String    @default("PENDING")
  fileUrl           String?
  fileFormat        String?
  totalTransactions Int?
  totalAmount       Decimal?  @db.Decimal(12, 2)
  totalTax          Decimal?  @db.Decimal(12, 2)
  generatedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  businessId        String
  tenantId          String?   // Multi-tenant support
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tenant            Tenant?   @relation("TenantReports", fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([businessId, type])
  @@index([tenantId])
  @@index([startDate, endDate])
  @@map("reports")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model TaxJurisdiction {
  id              String   @id @default(cuid())
  name            String
  type            String
  code            String   @unique
  parentCode      String?
  isActive        Boolean  @default(true)
  filingFrequency String?
  dueDate         Int?
  thresholdAmount Decimal? @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type, code])
  @@index([parentCode])
  @@map("tax_jurisdictions")
}

model WebhookEvent {
  id              String    @id @default(cuid())
  provider        String
  eventType       String
  eventId         String?
  payload         Json
  processed       Boolean   @default(false)
  processingError String?
  attempts        Int       @default(0)
  maxAttempts     Int       @default(3)
  nextRetryAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([provider, eventType])
  @@index([processed])
  @@index([nextRetryAt])
  @@map("webhook_events")
}

// Multi-tenant models
model Tenant {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  domain      String?
  status      String           @default("active") // active, suspended, deleted
  plan        String           @default("starter") // starter, professional, enterprise
  settings    Json?
  billing     Json?
  limits      Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  ownerId     String
  owner       User             @relation("TenantOwner", fields: [ownerId], references: [id])
  
  // Relationships
  tenantUsers TenantUser[]
  businesses  Business[]       @relation("TenantBusinesses")
  transactions Transaction[]   @relation("TenantTransactions") 
  reports     Report[]         @relation("TenantReports")
  posIntegrations PosIntegration[] @relation("TenantPosIntegrations")
  taxRates    TaxRate[]        @relation("TenantTaxRates")
  migrations  Migration[]
  backups     Backup[]
  scheduledOps ScheduledOperation[]
  
  @@index([slug])
  @@index([ownerId])
  @@index([status])
  @@map("tenants")
}

model TenantUser {
  id          String    @id @default(cuid())
  tenantId    String
  userId      String
  role        String    // owner, admin, manager, user, viewer
  permissions String[]
  isActive    Boolean   @default(true)
  invitedAt   DateTime?
  joinedAt    DateTime?
  createdAt   DateTime  @default(now())
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation("UserTenants", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
  @@index([role])
  @@map("tenant_users")
}

// Migration tracking models
model Migration {
  id            String    @id @default(cuid())
  tenantId      String?
  type          String    // full_migration, batch_migration, data_cleanup
  status        String    @default("pending") // pending, running, paused, completed, failed
  progress      Json?     // Current progress information
  config        Json      // Migration configuration
  result        Json?     // Migration results and statistics
  startedAt     DateTime?
  completedAt   DateTime?
  errorMessage  String?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tenant        Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User      @relation("MigrationCreator", fields: [createdBy], references: [id])
  
  @@index([tenantId])
  @@index([status])
  @@index([type])
  @@index([startedAt])
  @@map("migrations")
}

model Backup {
  id            String    @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  size          BigInt?
  recordCounts  Json?     // Count of records by type
  config        Json      // Backup configuration
  status        String    @default("creating") // creating, completed, failed, expired
  downloadUrl   String?
  checksum      String?
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([status])
  @@index([expiresAt])
  @@map("backups")
}

model ScheduledOperation {
  id              String    @id @default(cuid())
  tenantId        String
  name            String
  description     String?
  type            String    // backup, validation, cleanup, migration
  cronExpression  String
  timezone        String    @default("UTC")
  enabled         Boolean   @default(true)
  config          Json      // Operation-specific configuration
  lastRunAt       DateTime?
  lastRunStatus   String?   // success, failed, running
  lastRunDuration Int?      // Duration in milliseconds
  lastRunResult   Json?
  nextRunAt       DateTime?
  retentionDays   Int       @default(30)
  notifications   Json?     // Notification configuration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String
  
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator         User      @relation("ScheduledOperationCreator", fields: [createdBy], references: [id])
  
  @@index([tenantId])
  @@index([enabled])
  @@index([nextRunAt])
  @@index([type])
  @@map("scheduled_operations")
}

model ValidationResult {
  id            String    @id @default(cuid())
  tenantId      String?
  migrationId   String?
  type          String    // integrity_check, tenant_isolation, data_consistency
  status        String    // passed, failed, warnings
  score         Int       // 0-100 integrity score
  results       Json      // Detailed validation results
  recommendations Json?   // Recommendations for improvement
  executionTime Int       // Time taken in milliseconds
  createdAt     DateTime  @default(now())
  
  tenant        Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  migration     Migration? @relation(fields: [migrationId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("validation_results")
}
